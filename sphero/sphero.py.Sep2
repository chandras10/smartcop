import time
from spherov2 import scanner
from spherov2.sphero_edu import SpheroEduAPI, EventType
from spherov2.types import Color
from spherov2.adapter.tcp_adapter import get_tcp_adapter
from spherov2.commands.sphero import RollModes
from spherov2.scanner import ToyNotFoundError
from spherov2.types import Color
import signal
import argparse
import os
import collections

TOY_NAME = "SB-2D08"

class Sphero:

    COORDS = {
        0: {"x": 0, "y": 55},
        90: {"x": 50, "y": 55},
        180: {"x": 50, "y": 0},
        270: {"x": 0, "y": 0}
    }

    class move_toy(object):
        def __init__(self, outer, bolt):
            self.outer = outer
            self.bolt = bolt

        def move_direction(self, heading):
            method_name = 'move_' + str(heading)
            method = getattr(self, method_name, lambda: 'not a proper heading')
            return method()

        def move_0(self):
            d = self.bolt.get_location()
            while (abs(int(d['y'])) < self.outer.COORDS[0]['y']):
                self.bolt.roll(0, self.outer.SPEED, 0.0001)
                d = self.bolt.get_location()
            time.sleep(2)
            print(f"Moved in heading - 0")

        def move_90(self):
            d = self.bolt.get_location()
            while (abs(int(d['x'])) < self.outer.COORDS[90]['x']):
                self.bolt.roll(90, self.outer.SPEED, 0.0001)
                d = self.bolt.get_location()
            time.sleep(2)
            print(f"Moved in heading - 90")

        def move_180(self):
            d = self.bolt.get_location()
            while (abs(int(d['y'])) > self.outer.COORDS[180]['y']):
                self.bolt.roll(180, self.outer.SPEED, 0.0001)
                d = self.bolt.get_location()
            time.sleep(2)
            print(f"Moved in heading - 180")

        def move_270(self):
            d = self.bolt.get_location()
            while (abs(int(d['x'])) > self.outer.COORDS[270]['x']):
                self.bolt.roll(270, self.outer.SPEED, 0.0001)
                d = self.bolt.get_location()
            time.sleep(2)
            print(f"Moved in heading - 270")



    def __init__( self ):
        signal.signal( signal.SIGUSR1, lambda signal, frame: self._USR1_signal_handler() )
        signal.signal( signal.SIGUSR2, lambda signal, frame: self._USR2_signal_handler() )

        self.toy = None
        self.stopSphero = False

        self.buffer = collections.deque(maxlen=5)

        self.SPEED = 50
        self.ONE_SIDE = 45 # one side of the square in cms
        self.heading = 0

        for retry in range(2):  
            try:
                self.toy = scanner.find_toy(toy_name=TOY_NAME)
                break
            except ToyNotFoundError:
                print("Trying to find the sphero...")
                pass

        if self.toy:
            self.toy.name = "Chandra's Sphero"  
            print(self.toy) 


    def _USR1_signal_handler( self ):
        self.stopSphero = True

    def _USR2_signal_handler( self ):
        self.stopSphero = False

    def on_collision(self, api):
        print("Collision!!!!")


    def on_streaming_data(self, api):
        print(f"""distance: {api._SpheroEduAPI__sensor_data['distance']}, 
               roll: {api._SpheroEduAPI__sensor_data['attitude']['roll']},
               location: {api._SpheroEduAPI__sensor_data['locator']}
               """
            )
        try:
            self.buffer.append(int(api._SpheroEduAPI__sensor_data['attitude']['roll']))
            if (len(self.buffer) < 5) or len(set(self.buffer)) > 1:
               return 
            print(f"STUCK!!!! STUCK!!!! STUCK!!!! STUCK")
            h = api.get_heading()
            for _ in range(3):
                api.roll(h-90, self.SPEED, 0.001)
            api.roll(h, self.SPEED, 0)
        except ValueError:
            pass



    def MainLoop( self, count=-1 ):
        if self.toy is None:
            print("Could not find the Sphero")
            exit(-1)

        def move(bolt, heading):
            move_toy(self, bolt).move_direction(heading)

        with SpheroEduAPI(self.toy) as bolt:
            bolt.reset_aim()
            bolt.set_stabilization(True)
            bolt.set_front_led(Color(239, 0, 255))
            bolt.register_event(EventType.on_collision, self.on_collision)
            bolt.register_event(EventType.on_sensor_streaming_data, self.on_streaming_data)
            bolt.set_main_led(Color(r=0, g=255, b=0))


            while True:
                self.move_toy(self, bolt).move_direction(0)
                self.move_toy(self, bolt).move_direction(90)
                self.move_toy(self, bolt).move_direction(180)
                self.move_toy(self, bolt).move_direction(270)
                if (count > 0):
                    count -= 1
                    if count == 0:
                        break

            #reset bolt heading
            bolt.roll(0, self.SPEED, 0)
            time.sleep(2) 

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
                        prog='SpheroDriver',
                        description='Run a Sphero in a square loop',
                    )
    parser.add_argument('--count', type=int, default=-1, help='loop count. -1 means forever.')
    args = parser.parse_args()
    print(args)
    app = Sphero()
    app.MainLoop(args.count)
